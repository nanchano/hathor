syntax = "proto3";

package hathor;

option go_package = "./hathor";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

// Hathor will handle the CRUD operations around the events on the microservice
service Hathor {
    rpc Ping(EmptyRequest) returns (EmptyResponse);
    // CreateEvent creates and event given an Event message
    rpc CreateEvent(CreateEventRequest) returns (Event);
    // GetEvent returns the relevant info for an event given an ID
    rpc GetEvent(EventIDRequest) returns (Event);
    // UpdateEvent finds and updates a given event.
    rpc UpdateEvent(UpdateEventRequest) returns (Event);
    // DeleteEvent removes an event from the repository given an ID
    rpc DeleteEvent(EventIDRequest) returns (EmptyResponse);
    // GetEvents returns all the events from the repository.
    /* rpc GetEvents(GetEventsRequest) returns (GetEventsResponse); TBD*/ 
}

// Event represents the main use case of the app; a festival/party happening sometime, somewhere
message Event {
    // ID is the identifier for the event. Autogenerated
    int64 id = 1;
    // Name is the human-readable name for the event
    string name = 2;
    // Description is the human readable information about the event
    string description = 3;
    // Category is the event type
    string category = 4;
    // Location is the place where the event will be in
    string location = 5;
    // Publisher is the owner of the event
    string publisher = 6;
    // Lineup contains the relevant teams/artists that will participate in the event
    repeated string lineup = 7;
    // Start is the date the event starts
    google.protobuf.Timestamp start_ts = 8;
    // End is the date the event ends
    google.protobuf.Timestamp end_ts = 9;
    // CreatedAt is the timestamp when the event was created
    google.protobuf.Timestamp created_at = 10;
}

// CreateEventRequest is the request message to create an event
message CreateEventRequest {
    // Name is the name of the event to be created
    string name = 1;
    // Description is the information on the event to be created
    string description = 2;
    // Category is the type of the event to be created
    string category = 3;
    // Location is the place where the event that is created will be in
    string location = 4;
    // Publisher is the owner of the event to be created
    string publisher = 5;
    // Lineup contains the relevant teams/artists that will participate in the event to be created
    repeated string lineup = 6;
    // Start is the date the event to be created starts
    google.protobuf.Timestamp start_ts = 7;
    // End is the date the event to be created ends
    google.protobuf.Timestamp end_ts = 8;
}

// EventIDRequest is a request used for operations that only require an event ID
message EventIDRequest {
    // EventID is the identifier for an event
    int64 event_id = 1;
}

// UpdateEventRequest is the request message to update an event
message UpdateEventRequest {
    // UpdatedMask is the field mask for an event
    google.protobuf.FieldMask update_mask = 1;
    // Event is the updated event content
    UpdateEvent event = 2;
}


// UpdateEvent is the updated event
message UpdateEvent {
    // ID of the event
    int64 id = 1;
    // Name is the name of the event to be updated
    optional string name = 2;
    // Description is the information on the event to be updated
    optional string description = 3;
    // Category is the type of the event to be updated
    optional string category = 4;
    // Location is the place where the event that is updated will be in
    optional string location = 5;
    // Publisher is the owner of the event to be updated
    optional string publisher = 6;
    // Lineup contains the relevant teams/artists that will participate in the event to be updated
    repeated string lineup = 7;
    // Start is the date the event to be updated starts
    optional google.protobuf.Timestamp start_ts = 8;
    // End is the date the event to be updated ends
    optional google.protobuf.Timestamp end_ts = 9;
}

// EmptyResponse is just an empty response
message EmptyResponse {}

// EmptyRequest is just an empty request
message EmptyRequest{}
